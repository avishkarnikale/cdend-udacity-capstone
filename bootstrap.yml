# As of writing of this template the below template version is the latest and is currently the only valid value
AWSTemplateFormatVersion: "2010-09-09"

# Here we are parameters which can be overridden by user for thier own use case
# Please note that default values given below these will be over ridden by user params 
Parameters:

    EnvironmentName:
        Description: This will act as top level differentiator for our stack that will be prefixed to resources
        Type: String
    
    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for the VPC in the region
        Type: String
        Default: 10.0.0.0/16
    PublicSubnetCIDR:
        Description: Please enter the IP range (CIDR notation) for the PUBLIC subnet in the 1st Availability Zone
        Type: String
        Default: 10.0.0.0/24


Resources:
    # Let us define the base/global components first 
    # 1. VPC - This will our VPC for suggested region us-west-2 i.e. Oregon
    # 2. InternetGateWay - IGW - This will be our Internet Gateway for routing traffic to/from external world
    # 3. Create a Security Group with Ingress allowed on Port 80
    # 4. Create a Route Table and add a Public Route 

    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags: 
              - Key: Name 
                Value: !Ref EnvironmentName

    IGW:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
              - Key: Name
                Value: !Ref EnvironmentName
            
    IGWAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref IGW
            VpcId: !Ref VPC
            
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Routes
    
    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: IGWAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref IGW

    PublicSubnet: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnetCIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-PUBLIC-SUBNET-AZ-(1)
    
    PublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet
                
    SecurityGroupForJenkinsServer:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Jenkins Server security group
            SecurityGroupIngress:
            - CidrIp: 0.0.0.0/0
              IpProtocol: tcp
              FromPort: 80
              ToPort: 80
            - CidrIp: 0.0.0.0/0
              IpProtocol: tcp
              FromPort: 8080
              ToPort: 8080
            - CidrIp: 0.0.0.0/0
              IpProtocol: tcp
              FromPort: 22
              ToPort: 22
            Tags:
            -   Key: Name
                Value: !Sub ${EnvironmentName}-SECGRP-JENKINS
    JenkinsRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
          Path: "/"
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonS3FullAccess
            - arn:aws:iam::aws:policy/AmazonEC2FullAccess
            - arn:aws:iam::aws:policy/AmazonVPCFullAccess
            - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

    JenkinsProfile:
        Type: AWS::IAM::InstanceProfile
        Properties: 
          Roles: [!Ref JenkinsRole]
    
    JenkinsInstance: 
        Type: AWS::EC2::Instance
        Properties: 
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    touch /var/log/avi2.txt
                    apt -y update
                    apt -y install default-jdk
                    wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
                    sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
                    apt -y update
                    apt -y install jenkins
                    apt -y install jx
                    apt -y install make
                    curl -Lo hadolint https://github.com/hadolint/hadolint/releases/download/v1.17.2/hadolint-Linux-x86_64
                    chmod +x hadolint
                    mv hadolint /usr/local/bin
                    apt -y install tidy
                    apt -y install python3-venv
                    apt -y install pylint
                    apt -y install python3-pip
                    #curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                    #chmod +x ./kubectl
                    #mv ./kubectl /usr/local/bin/kubectl
                    #apt -y install docker.io
                    #curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
                    #chmod +x minikube
                    #mv minikube /usr/local/bin/
                    #systemctl enable kubelet.service
                    #minikube start --vm-driver=none
                    
                    
            ImageId: "ami-03b6f27628a4569c8"
            InstanceType: t2.micro
            IamInstanceProfile: !Ref JenkinsProfile
            SecurityGroupIds: [!Ref SecurityGroupForJenkinsServer]
            KeyName: "DockerServer"
            SubnetId: !Ref PublicSubnet
            
            BlockDeviceMappings:
              - DeviceName: "/dev/xvda"
                Ebs:
                    VolumeSize: 24
                    VolumeType: gp2


                  